name: Build and test
on: push
jobs:
   gfortran:
      strategy:
         matrix:
            version: [7, 8, 9, 10, 11]
            os: [ubuntu-latest]
            include:
               - version: 5
                 os: ubuntu-18.04
               - version: 6
                 os: ubuntu-18.04
               - version: 8
                 cmake_args: -DFABM_USE_CONTIGUOUS=OFF
         fail-fast: false
      runs-on: ${{ matrix.os }}
      env:
        FFLAGS: -fcheck=all
      steps:
      - name: Install dependencies
        run: sudo apt-get install gfortran-${{ matrix.version }} python3-numpy python3-setuptools python3-wheel
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Run all test cases with host emulators
        run: python3 util/developers/run_all_testcases.py harness --show_logs --compiler gfortran-${{ matrix.version }} ${{ matrix.cmake_args }}
      - name: Run all test cases with pyfabm
        run: python3 util/developers/run_all_testcases.py pyfabm --show_logs --compiler gfortran-${{ matrix.version }} ${{ matrix.cmake_args }}
   ifort:
      runs-on: ubuntu-latest
      steps:
      - name: Install compiler
        run: |
           wget --no-verbose https://registrationcenter-download.intel.com/akdlm/irc_nas/17508/l_fortran-compiler_p_2021.1.2.62_offline.sh
           /bin/sh l_fortran-compiler_p_2021.1.2.62_offline.sh -a --silent --cli --install-dir ${HOME}/intel --eula accept
      - name: Install dependencies
        run: sudo apt-get install python3-numpy python3-wheel
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Run all test cases with host emulators
        run: |
           source ${HOME}/intel/setvars.sh
           python3 util/developers/run_all_testcases.py harness --show_logs --compiler ifort
      - name: Run all test cases with pyfabm
        run: |
           source ${HOME}/intel/setvars.sh
           python3 util/developers/run_all_testcases.py pyfabm --show_logs --compiler ifort
   nvfortran:
      # for available versions, see https://developer.nvidia.com/nvidia-hpc-sdk-releases
      runs-on: ubuntu-latest
      strategy:
        matrix:
          include:
            - version: "20.9"  # 2020-10
              exe: nvhpc_2020_209_Linux_x86_64_cuda_11.0
            - version: "22.9"  # 2022-10
              exe: nvhpc_2022_229_Linux_x86_64_cuda_11.7
        fail-fast: false
      env:
        FFLAGS: -Mbounds -Mchkptr
      steps:
      - name: Install compiler
        run: |
           wget --no-verbose https://developer.download.nvidia.com/hpc-sdk/${{ matrix.version }}/${{ matrix.exe }}.tar.gz
           tar xpzf ${{ matrix.exe }}.tar.gz
           ${{ matrix.exe }}/install
        env:
           NVHPC_SILENT: true
           NVHPC_INSTALL_DIR: /home/runner/nvhpc
           NVHPC_INSTALL_TYPE: single
      - name: Install dependencies
        run: sudo apt-get install python3-numpy python3-wheel
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Run all test cases with host emulators
        run: python3 util/developers/run_all_testcases.py harness --show_logs --compiler /home/runner/nvhpc/Linux_x86_64/${{ matrix.version }}/compilers/bin/pgfortran
      - name: Run all test cases with pyfabm
        run: python3 util/developers/run_all_testcases.py pyfabm --show_logs --compiler /home/runner/nvhpc/Linux_x86_64/${{ matrix.version }}/compilers/bin/pgfortran
   aocc:
      # for available versions, see https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/packages/aocc/package.py
      runs-on: ubuntu-latest
      strategy:
        matrix:
          version:
          - "2.2.0"  # 2020-07-15
          - "3.0.0"  # 2021-03-15
          - "3.1.0"  # 2021-07-19
          #- "3.2.0"  # 2021-12-10 Fails during fabm-c compilation. 4.0.0 succeeds but is not available via spack yet
        fail-fast: false
      steps:
      - name: Install compiler
        run: |
           cd /home/runner
           wget --no-verbose https://developer.amd.com/wordpress/media/files/aocc-compiler-${{ matrix.version }}.tar
           tar xpf aocc-compiler-${{ matrix.version }}.tar
           ./aocc-compiler-${{ matrix.version }}/install.sh
      - name: Install dependencies
        run: sudo apt-get install python3-numpy python3-wheel
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Run all test cases with host emulators
        run: |
           source /home/runner/setenv_AOCC.sh
           python3 util/developers/run_all_testcases.py harness --show_logs --compiler flang
      - name: Run all test cases with pyfabm
        run: |
           source /home/runner/setenv_AOCC.sh
           python3 util/developers/run_all_testcases.py pyfabm --show_logs --compiler flang
